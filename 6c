#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node *next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the beginning of the circular list
struct Node* insertAtBeginning(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        newNode->next = newNode; // Point to itself for a single node circular list
        return newNode;
    }
    newNode->next = head->next;
    head->next = newNode;
    return head;
}

// Function to insert a node at the end of the circular list
struct Node* insertAtEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        newNode->next = newNode; // Point to itself for a single node circular list
        return newNode;
    }
    newNode->next = head->next;
    head->next = newNode;
    return newNode;
}

// Function to insert a node after a specific node in the circular list
void insertAfter(struct Node* prevNode, int data) {
    if (prevNode == NULL) {
        printf("Previous node cannot be NULL.\n");
        return;
    }
    struct Node* newNode = createNode(data);
    newNode->next = prevNode->next;
    prevNode->next = newNode;
}

// Function to delete a node from the beginning of the circular list
struct Node* deleteFromBeginning(struct Node* head) {
    if (head == NULL) {
        printf("Circular list is empty.\n");
        return NULL;
    }
    if (head->next == head) { // Single node circular list
        free(head);
        return NULL;
    }
    struct Node* temp = head->next;
    head->next = temp->next;
    free(temp);
    return head;
}

// Function to delete a node from the end of the circular list
struct Node* deleteFromEnd(struct Node* head) {
    if (head == NULL) {
        printf("Circular list is empty.\n");
        return NULL;
    }
    if (head->next == head) { // Single node circular list
        free(head);
        return NULL;
    }
    struct Node* current = head;
    while (current->next->next != head)
        current = current->next;
    struct Node* temp = current->next;
    current->next = head;
    free(temp);
    return head;
}

// Function to delete a node after a specific node in the circular list
void deleteAfter(struct Node* prevNode) {
    if (prevNode == NULL) {
        printf("Previous node cannot be NULL.\n");
        return;
    }
    if (prevNode->next == NULL) {
        printf("Given node is the last node.\n");
        return;
    }
    struct Node* temp = prevNode->next;
    prevNode->next = temp->next;
    free(temp);
}

// Function to search for a given element in the circular list
void search(struct Node* head, int key) {
    if (head == NULL) {
        printf("Circular list is empty.\n");
        return;
    }
    struct Node* current = head->next;
    int found = 0, position = 1;
    do {
        if (current->data == key) {
            found = 1;
            break;
        }
        current = current->next;
        position++;    } while (current != head->next);
    if (found)
        printf("Element %d found at position %d.\n", key, position);
    else
        printf("Element %d not found in the circular list.\n", key);
}

// Function to display the elements of the circular list
void display(struct Node* head) {
    if (head == NULL) {
        printf("Circular list is empty.\n");
        return;
    }
    struct Node* current = head->next;
    printf("Circular List: ");
    do {
        printf("%d ", current->data);
        current = current->next;
    } while (current != head->next);
    printf("\n");
}

// Function to free memory allocated to the circular list
void freeCircularList(struct Node* head) {
    if (head == NULL)
        return;
    struct Node* current = head->next;
    while (current != head) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }
    free(head);
}

int main() {
    struct Node* head = NULL;
    int choice, data, key;

    while (1) {
        printf("\n1. Insert at beginning\n");
        printf("2. Insert at end\n");
        printf("3. Insert after a specific node\n");
        printf("4. Delete from beginning\n");
        printf("5. Delete from end\n");
        printf("6. Delete after a specific node\n");
        printf("7. Search for an element\n");
        printf("8. Display the circular list\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert at beginning: ");
                scanf("%d", &data);
                head = insertAtBeginning(head, data);
                break;
            case 2:
                printf("Enter data to insert at end: ");
                scanf("%d", &data);
                head = insertAtEnd(head, data);
                break;
            case 3:
                printf("Enter data to insert after: ");
                scanf("%d", &key);
                printf("Enter data to insert: ");
                scanf("%d", &data);
                struct Node* temp = head;
                do {
                    if (temp->data == key) {
                        insertAfter(temp, data);
                        break;
                    }
                    temp = temp->next;
                } while (temp != head);
                if (temp == head)
                    printf("Node with data %d not found.\n", key);
                break;
            case 4:
                head = deleteFromBeginning(head);
                break;
            case 5:
                head = deleteFromEnd(head);
                break;
            case 6:
                printf("Enter data of the node after which deletion should occur: ");
                scanf("%d", &key);
                temp = head;
                do {
                    if (temp->data == key) {
                        deleteAfter(temp);
                        break;
                    }
                    temp = temp->next;
                } while (temp != head);
                if (temp == head)
                    printf("Node with data %d not found.\n", key);
                break;
            case 7:
                printf("Enter element to search: ");
                scanf("%d", &key);
                search(head, key);
                break;
            case 8:
                display(head);
                break;
            case 9:
                freeCircularList(head);
                printf("Exiting the program.\n");
                exit(0);
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    }

    return 0;
}
